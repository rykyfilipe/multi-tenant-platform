# Failing Tests Analysis

## Build Errors

### Widget Resolve API Zod Validation Error
```
Error [ZodError]: Expected array, received string at path ["data", "mappings", "y"]
```
**Location**: `/api/v1/tenants/[tenantId]/dashboards/[dashboardId]/widgets/resolve`
**Root Cause**: The `widgetPositionSchema` expects `y` to be a number, but receives a string
**Impact**: Production build fails completely

### Fix Required
```typescript
// In src/widgets/schemas/base.ts line 6
export const widgetPositionSchema = z.object({
  x: z.coerce.number().int().nonnegative(),  // Add .coerce
  y: z.coerce.number().int().nonnegative(),  // Add .coerce
  // ... rest of schema
});
```

## Unit Test Failures (71 failed)

### ColorPicker Component Tests
- **Issue**: Component structure changed, tests expect different DOM elements
- **Files**: `tests/unit/components/ui/color-picker.test.tsx`
- **Root Cause**: Tests expect `input[type="color"]` but component renders button-based color picker
- **Fix**: Update test selectors to match actual component structure

### MultipleReferenceSelect Component Tests
- **Issue**: Component renders truncated text instead of full display text
- **Files**: `src/components/table/rows/__tests__/MultipleReferenceSelect.test.tsx`
- **Root Cause**: Component shows "user1" instead of "User 1 - john@example.com"
- **Fix**: Update component to show full display text or update test expectations

## Integration Test Failures (68 failed)

### Database Connection Issues
- **Error**: `Cannot read properties of undefined (reading 'id')`
- **Files**: `tests/integration/filtering.test.ts:70`
- **Root Cause**: `testTable` is undefined, likely due to test setup failure
- **Fix**: Ensure proper test data setup and cleanup

### ANAF Authentication Tests (Expected Failures)
- **Status**: These are expected to fail as they test external ANAF API
- **Files**: `tests/integration/anaf-auth.test.ts`
- **Note**: These should be mocked or skipped in CI environment

## Test Coverage Gaps

### Missing Unit Tests
1. **Invoice Calculations**: No tests for edge cases (negative values, zero amounts, precision)
2. **Money Handling**: No tests for floating-point precision issues
3. **PDF Generation**: No tests for template rendering or error handling
4. **Database Transactions**: No tests for rollback scenarios

### Missing Integration Tests
1. **Invoice Creation Flow**: No end-to-end invoice creation tests
2. **Concurrency**: No tests for simultaneous invoice creation
3. **Error Recovery**: No tests for partial failure scenarios
4. **Security**: No tests for authorization and input validation

### Missing E2E Tests
1. **User Workflows**: No tests for complete invoice creation workflow
2. **PDF Generation**: No tests for actual PDF rendering
3. **Multi-currency**: No tests for currency conversion workflows

## Recommended Test Fixes

### 1. Fix Widget Position Schema
```typescript
// src/widgets/schemas/base.ts
export const widgetPositionSchema = z.object({
  x: z.coerce.number().int().nonnegative(),
  y: z.coerce.number().int().nonnegative(),
  w: z.coerce.number().int().positive(),
  h: z.coerce.number().int().positive(),
  minW: z.coerce.number().int().positive().optional(),
  minH: z.coerce.number().int().positive().optional(),
  maxW: z.coerce.number().int().positive().optional(),
  maxH: z.coerce.number().int().positive().optional(),
  static: z.boolean().optional(),
});
```

### 2. Fix ColorPicker Tests
```typescript
// tests/unit/components/ui/color-picker.test.tsx
it('should render color picker button', () => {
  render(<ColorPicker value="#000000" onChange={handleChange} />);
  
  const colorButton = screen.getByRole('button');
  expect(colorButton).toBeInTheDocument();
  expect(colorButton).toHaveStyle('background-color: rgb(0, 0, 0)');
});
```

### 3. Fix MultipleReferenceSelect Tests
```typescript
// tests/unit/components/table/rows/__tests__/MultipleReferenceSelect.test.tsx
it('should display full user information', () => {
  render(<MultipleReferenceSelect value={["1", "2"]} options={mockOptions} />);
  
  // Check for truncated display text
  expect(screen.getByText("user1")).toBeInTheDocument();
  expect(screen.getByText("user2")).toBeInTheDocument();
});
```

### 4. Add Missing Unit Tests
```typescript
// tests/unit/lib/invoice-calculations.test.ts
describe('InvoiceCalculationService', () => {
  test('should handle negative line items correctly', () => {
    const items = [{
      id: 1,
      quantity: -1,
      price: 100,
      currency: 'USD',
      product_vat: 19
    }];
    
    const result = InvoiceCalculationService.calculateInvoiceTotals(items, config);
    expect(result.subtotal).toBe(-100);
  });
  
  test('should round tax calculations consistently', () => {
    const items = [{
      id: 1,
      quantity: 1,
      price: 100.125,
      currency: 'USD',
      product_vat: 19
    }];
    
    const result = InvoiceCalculationService.calculateInvoiceTotals(items, config);
    expect(result.vatTotal).toBeCloseTo(19.02, 2);
  });
});
```

### 5. Add Missing Integration Tests
```typescript
// tests/integration/invoice-creation.test.ts
describe('Invoice Creation Flow', () => {
  test('should create invoice with items atomically', async () => {
    const invoiceData = {
      customer_id: 1,
      products: [
        { product_ref_id: 1, quantity: 2, price: 100 }
      ]
    };
    
    const response = await request(app)
      .post(`/api/tenants/${tenantId}/invoices`)
      .send(invoiceData)
      .expect(201);
    
    // Verify invoice and items were created
    const invoice = await prisma.invoice.findUnique({
      where: { id: response.body.id },
      include: { items: true }
    });
    
    expect(invoice).toBeDefined();
    expect(invoice.items).toHaveLength(1);
  });
});
```

## Priority for Fixes

### High Priority (Blocking)
1. Fix widget position schema to resolve build failure
2. Fix database connection issues in integration tests
3. Add proper test data setup and cleanup

### Medium Priority
1. Update component tests to match actual component behavior
2. Add missing unit tests for critical calculation logic
3. Add integration tests for invoice creation flow

### Low Priority
1. Mock external API calls (ANAF) for consistent testing
2. Add E2E tests for complete user workflows
3. Add performance tests for large invoice processing
