generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  adminId           Int                @unique
  address           String?
  companyEmail      String?
  createdAt         DateTime           @default(now())
  language          String?
  logoUrl           String?
  phone             String?
  theme             String?
  timezone          String?
  updatedAt         DateTime           @updatedAt
  website           String?
  memoryUsedGB      Float              @default(0)
  memoryLimitGB     Float              @default(1)
  lastMemoryUpdate  DateTime?
  columnPermissions ColumnPermission[]
  databases         Database[]
  tablePermissions  TablePermission[]
  admin             User               @relation("TenantAdmin", fields: [adminId], references: [id])
  users             User[]             @relation("TenantUsers")
}

model User {
  id                           Int                @id @default(autoincrement())
  email                        String             @unique
  firstName                    String
  lastName                     String
  password                     String?
  role                         Role
  tenantId                     Int?
  stripeCustomerId             String?
  stripeSubscriptionId         String?
  subscriptionCurrentPeriodEnd DateTime?
  subscriptionPlan             String?
  subscriptionStatus           String?
  accounts                     Account[]
  apiTokens                    ApiToken[]
  columnPermissions            ColumnPermission[]
  sessions                     Session[]
  tablePermissions             TablePermission[]
  adminOf                      Tenant?            @relation("TenantAdmin")
  tenant                       Tenant?            @relation("TenantUsers", fields: [tenantId], references: [id], onDelete: Cascade)
}

model Database {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  createdAt DateTime @default(now())
  name      String   @default("Main Database")
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tables    Table[]
}

model Table {
  id                  Int                @id @default(autoincrement())
  databaseId          Int
  name                String
  description         String
  isPublic            Boolean            @default(false)
  referencedByColumns Column[]           @relation("ReferenceColumnTable")
  columns             Column[]
  columnPermissions   ColumnPermission[]
  rows                Row[]
  database            Database           @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  tablePermissions    TablePermission[]
}

model Column {
  id                Int                @id @default(autoincrement())
  name              String
  type              String
  required          Boolean            @default(false)
  primary           Boolean            @default(false)
  tableId           Int
  referenceTableId  Int?
  cells             Cell[]
  referenceTable    Table?             @relation("ReferenceColumnTable", fields: [referenceTableId], references: [id])
  table             Table              @relation(fields: [tableId], references: [id], onDelete: Cascade)
  columnPermissions ColumnPermission[]
}

model Row {
  id        Int      @id @default(autoincrement())
  tableId   Int
  createdAt DateTime @default(now())
  cells     Cell[]
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Cell {
  id       Int    @id @default(autoincrement())
  rowId    Int
  columnId Int
  value    Json
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  row      Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
}

model ApiToken {
  id        String    @id @default(cuid())
  userId    Int
  tokenHash String    @unique
  name      String?
  scopes    String[]
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  revoked   Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TablePermission {
  id        Int      @id @default(autoincrement())
  userId    Int
  tableId   Int
  tenantId  Int
  canRead   Boolean  @default(false)
  canEdit   Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tableId])
  @@index([tenantId])
  @@index([tableId])
  @@index([userId])
}

model ColumnPermission {
  id        Int      @id @default(autoincrement())
  userId    Int
  columnId  Int
  tenantId  Int
  canRead   Boolean  @default(false)
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tableId   Int
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, columnId])
  @@index([tenantId])
  @@index([columnId])
  @@index([userId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}
