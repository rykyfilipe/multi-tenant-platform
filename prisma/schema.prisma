generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id      Int    @id @default(autoincrement())
  name    String @unique
  adminId Int    @unique
  admin   User   @relation("TenantAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  users   User[] @relation("TenantUsers")

  logoUrl   String?
  theme     String?
  timezone  String?
  language  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyEmail String?
  phone        String?
  website      String?
  address      String?

  // Memory usage tracking
  memoryUsedGB Float @default(0.0) // Memory used in GB
  memoryLimitGB Float @default(1.0) // Memory limit in GB based on plan
  lastMemoryUpdate DateTime @default(now())

  databases Database[]

  tablePermissions  TablePermission[]
  columnPermissions ColumnPermission[]
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstName String
  lastName  String
  password  String?
  role      Role

  accounts Account[] // ‚Üê necesar pt OAuth
  sessions Session[]

  tenantId Int?
  tenant   Tenant? @relation("TenantUsers", fields: [tenantId], references: [id], onDelete: Cascade)

  adminOf           Tenant?            @relation("TenantAdmin")
  apiTokens         ApiToken[]
  tablePermissions  TablePermission[]
  columnPermissions ColumnPermission[]

  // Stripe subscription fields
  stripeCustomerId        String?
  stripeSubscriptionId    String?
  subscriptionStatus      String?
  subscriptionPlan        String?
  subscriptionCurrentPeriodEnd DateTime?
}

model Database {
  id       Int     @id @default(autoincrement())
  name     String  @default("Main Database")
  tenantId Int
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tables   Table[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id         Int      @id @default(autoincrement())
  name       String
  databaseId Int
  database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  description String
  isPublic    Boolean @default(false)
  columns     Column[]
  rows        Row[]

  referencedByColumns Column[] @relation("ReferenceColumnTable")

  tablePermissions  TablePermission[]
  columnPermissions ColumnPermission[]
}

model Column {
  id            Int     @id @default(autoincrement())
  name          String
  type          String
  required      Boolean @default(false)
  primary       Boolean @default(false)
  autoIncrement Boolean @default(false)
  tableId       Int
  table         Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  cells Cell[]

  referenceTableId Int?
  referenceTable   Table? @relation("ReferenceColumnTable", fields: [referenceTableId], references: [id], onDelete: SetNull)

  columnPermissions ColumnPermission[]
}

model Row {
  id        Int      @id @default(autoincrement())
  tableId   Int
  createdAt DateTime @default(now())
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]
}

model Cell {
  id       Int  @id @default(autoincrement())
  rowId    Int
  columnId Int
  value    Json

  row    Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

model ApiToken {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tokenHash String    @unique
  name      String?
  scopes    String[]
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  revoked   Boolean   @default(false)

  @@index([userId])
}

model TablePermission {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  tableId Int
  table   Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  canRead   Boolean @default(false)
  canEdit   Boolean @default(false)
  canDelete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tableId])
  @@index([tenantId])
  @@index([tableId])
  @@index([userId])
}

model ColumnPermission {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  columnId Int
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  tableId Int
  table   Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  canRead Boolean @default(false)
  canEdit Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, columnId])
  @@index([tenantId])
  @@index([columnId])
  @@index([userId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
