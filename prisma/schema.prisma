generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("YDV_DATABASE_URL")
  directUrl    = env("YDV_DATABASE_URL")
  relationMode = "prisma"
}

model Tenant {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  adminId             Int                 @unique
  address             String?
  companyEmail        String?
  createdAt           DateTime            @default(now())
  language            String?
  logoUrl             String?
  phone               String?
  theme               String?
  timezone            String?
  updatedAt           DateTime            @updatedAt
  website             String?
  lastMemoryUpdate    DateTime?
  memoryLimitGB       Float               @default(0.1)
  memoryUsedGB        Float               @default(0)
  defaultCurrency     String?             @default("USD")
  companyBank         String?
  companyCity         String?
  companyCountry      String?
  companyIban         String?
  companyPostalCode   String?
  companyStreet       String?
  companyStreetNumber String?
  companyTaxId        String?
  registrationNumber  String?
  invoiceStartNumber  Int?                @default(1)
  invoiceSeriesPrefix String?             @default("INV")
  invoiceIncludeYear  Boolean?            @default(true)
  enabledModules      String[]            @default([])
  columnPermissions   ColumnPermission[]
  databases           Database[]
  invitations         Invitation[]
  tablePermissions    TablePermission[]
  dashboards          Dashboard[]
  widgets             Widget[]
  widgetDrafts        WidgetDraft[]
  widgetAudits        WidgetAudit[]
  admin               User                @relation("TenantAdmin", fields: [adminId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  users               User[]              @relation("TenantUsers")
  userActivities      UserActivity[]
  databaseActivities  DatabaseActivity[]
  systemMetrics       SystemMetrics[]
  tenantUsage         TenantUsage[]
  apiUsage            ApiUsage[]
  errorLogs           ErrorLog[]
  performanceAlerts   PerformanceAlert[]
  invoiceSeries       InvoiceSeries[]
  invoiceAuditLogs    InvoiceAuditLog[]
  userPreferences     UserPreferences[]
  pdfAnalytics        PDFAnalytics[]
  pdfTemplateConfigs  PDFTemplateConfig[]
  anafCredentials     ANAFCredentials[]
  anafSubmissionLogs  ANAFSubmissionLog[]
  WidgetSnapshot      WidgetSnapshot[]

  @@index([adminId])
}

model User {
  id                           Int                @id @default(autoincrement())
  email                        String             @unique
  firstName                    String
  lastName                     String
  password                     String?
  role                         Role
  tenantId                     Int?
  stripeCustomerId             String?
  stripeSubscriptionId         String?
  subscriptionCurrentPeriodEnd DateTime?
  subscriptionPlan             String?
  subscriptionStatus           String?
  profileImage                 String?
  accounts                     Account[]
  columnPermissions            ColumnPermission[]
  sessions                     Session[]
  tablePermissions             TablePermission[]
  adminOf                      Tenant?            @relation("TenantAdmin")
  tenant                       Tenant?            @relation("TenantUsers", fields: [tenantId], references: [id], onDelete: Cascade)
  userActivities               UserActivity[]
  apiUsage                     ApiUsage[]
  errorLogs                    ErrorLog[]
  userPreferences              UserPreferences?
  anafCredentials              ANAFCredentials[]
  createdDashboards            Dashboard[]        @relation("DashboardCreator")
  updatedDashboards            Dashboard[]        @relation("DashboardUpdater")
  createdWidgets               Widget[]           @relation("WidgetCreator")
  updatedWidgets               Widget[]           @relation("WidgetUpdater")
  createdWidgetDrafts          WidgetDraft[]         @relation("WidgetDraftCreator")
  updatedWidgetDrafts          WidgetDraft[]         @relation("WidgetDraftUpdater")
  widgetAuditEvents            WidgetAudit[]         @relation("WidgetAuditActor")
  columnMigrationLogs          ColumnMigrationLog[]

  @@index([tenantId])
}

model Database {
  id                 Int                @id @default(autoincrement())
  tenantId           Int
  createdAt          DateTime           @default(now())
  name               String             @default("Main Database")
  updatedAt          DateTime           @updatedAt
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tables             Table[]
  databaseActivities DatabaseActivity[]
  invoiceSeries      InvoiceSeries[]
  invoiceAuditLogs   InvoiceAuditLog[]

  @@index([tenantId])
}

model Table {
  id                  Int                @id @default(autoincrement())
  databaseId          Int
  name                String
  description         String
  isPublic            Boolean            @default(false)
  isProtected         Boolean            @default(false)
  protectedType       String?
  moduleType          String?
  isModuleTable       Boolean            @default(false)
  referencedByColumns Column[]           @relation("ReferenceColumnTable")
  columns             Column[]
  columnPermissions   ColumnPermission[]
  rows                Row[]
  database            Database           @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  tablePermissions    TablePermission[]

  @@unique([databaseId, name])
  @@index([databaseId])
  @@index([databaseId, name])
  @@index([isPublic, isProtected])
}

model Column {
  id                Int                    @id @default(autoincrement())
  name              String
  type              String
  description       String?
  required          Boolean                @default(false)
  primary           Boolean                @default(false)
  unique            Boolean                @default(false)
  tableId           Int
  referenceTableId  Int?
  customOptions     String[]               @default([])
  defaultValue      String?
  order             Int                    @default(0)
  isLocked          Boolean                @default(false)
  isModuleColumn    Boolean                @default(false)
  semanticType      String?
  cells             Cell[]
  referenceTable    Table?                 @relation("ReferenceColumnTable", fields: [referenceTableId], references: [id], onDelete: SetNull)
  table             Table                  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  columnPermissions ColumnPermission[]
  migrationLogs     ColumnMigrationLog[]

  @@unique([tableId, name])
  @@index([tableId])
  @@index([tableId, name])
  @@index([referenceTableId])
}

model Row {
  id        Int      @id @default(autoincrement())
  tableId   Int
  createdAt DateTime @default(now())
  cells     Cell[]
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
}

model Cell {
  id           Int       @id @default(autoincrement())
  rowId        Int
  columnId     Int
  value        Json
  stringValue  String?
  numberValue  Decimal?
  dateValue    DateTime?
  booleanValue Boolean?
  column       Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  row          Row       @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
  @@index([stringValue])
  @@index([numberValue])
  @@index([dateValue])
  @@index([booleanValue])
}

model TablePermission {
  id        Int      @id @default(autoincrement())
  userId    Int
  tableId   Int
  tenantId  Int
  canRead   Boolean  @default(false)
  canEdit   Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tableId])
  @@index([tenantId])
  @@index([tableId])
  @@index([userId])
}

model ColumnPermission {
  id        Int      @id @default(autoincrement())
  userId    Int
  columnId  Int
  tenantId  Int
  canRead   Boolean  @default(false)
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tableId   Int
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, columnId])
  @@index([tenantId])
  @@index([columnId])
  @@index([userId])
  @@index([tableId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  firstName String
  lastName  String
  role      Role
  tenantId  Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  accepted  Boolean  @default(false)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([tenantId])
}

model UserActivity {
  id         Int      @id @default(autoincrement())
  tenantId   Int
  userId     Int
  action     String
  resource   String?
  resourceId Int?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
  @@index([action, createdAt])
}

model DatabaseActivity {
  id           Int      @id @default(autoincrement())
  tenantId     Int
  databaseId   Int
  action       String
  tableName    String?
  query        String?
  responseTime Int?
  rowsAffected Int?
  metadata     Json?
  createdAt    DateTime @default(now())
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  database     Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([databaseId, createdAt])
}

model SystemMetrics {
  id                Int      @id @default(autoincrement())
  tenantId          Int
  cpuUsage          Decimal  @db.Decimal(5, 2)
  memoryUsage       Decimal  @db.Decimal(5, 2)
  diskUsage         Decimal  @db.Decimal(5, 2)
  networkLatency    Int?
  errorRate         Decimal  @default(0) @db.Decimal(5, 2)
  activeConnections Int      @default(0)
  metadata          Json?
  createdAt         DateTime @default(now())
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
}

model TenantUsage {
  id              Int       @id @default(autoincrement())
  tenantId        Int
  cpuUsage        Decimal   @db.Decimal(5, 2)
  memoryUsage     Decimal   @db.Decimal(5, 2)
  storageUsage    Decimal   @db.Decimal(10, 2)
  apiCalls        Int       @default(0)
  databaseQueries Int       @default(0)
  overageAmount   Decimal   @default(0) @db.Decimal(10, 2)
  lastActivity    DateTime?
  createdAt       DateTime  @default(now())
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
}

model ApiUsage {
  id           Int      @id @default(autoincrement())
  tenantId     Int
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int
  requestSize  Int?
  responseSize Int?
  userId       Int?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, createdAt])
  @@index([endpoint, createdAt])
  @@index([userId])
}

model ErrorLog {
  id           Int      @id @default(autoincrement())
  tenantId     Int
  userId       Int?
  errorType    String
  errorMessage String
  stackTrace   String?
  endpoint     String?
  metadata     Json?
  resolved     Boolean  @default(false)
  createdAt    DateTime @default(now())
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, createdAt])
  @@index([errorType, createdAt])
  @@index([userId])
}

model PerformanceAlert {
  id           Int       @id @default(autoincrement())
  tenantId     Int
  alertType    String
  metric       String
  threshold    Decimal   @db.Decimal(10, 2)
  currentValue Decimal   @db.Decimal(10, 2)
  severity     String
  message      String
  resolved     Boolean   @default(false)
  resolvedAt   DateTime?
  createdAt    DateTime  @default(now())
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([alertType, createdAt])
}

model InvoiceSeries {
  id            Int      @id @default(autoincrement())
  tenantId      Int
  databaseId    Int
  series        String
  prefix        String   @default("")
  suffix        String   @default("")
  separator     String   @default("-")
  includeYear   Boolean  @default(false)
  includeMonth  Boolean  @default(false)
  resetYearly   Boolean  @default(false)
  currentNumber Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  database      Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  @@unique([tenantId, databaseId, series])
  @@index([tenantId])
  @@index([databaseId])
}

model InvoiceAuditLog {
  id         Int      @id @default(autoincrement())
  tenantId   Int
  databaseId Int
  invoiceId  Int
  action     String
  userId     Int?
  changes    Json?
  metadata   Json?
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([databaseId])
  @@index([invoiceId])
  @@index([action, createdAt])
}

model UserPreferences {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  tenantId           Int
  tourDashboardDone  Boolean  @default(false)
  tourInvoiceDone    Boolean  @default(false)
  tourDatabaseDone   Boolean  @default(false)
  tourUsersDone      Boolean  @default(false)
  tourSettingsDone   Boolean  @default(false)
  tourAnalyticsDone  Boolean  @default(false)
  autoStartTours     Boolean  @default(true)
  showTourHints      Boolean  @default(true)
  tourSpeed          String   @default("normal")
  theme              String   @default("system")
  language           String   @default("en")
  timezone           String   @default("UTC")
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  weeklyDigest       Boolean  @default(true)
  sidebarCollapsed   Boolean  @default(false)
  compactMode        Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([userId])
}

model PDFAnalytics {
  id             Int      @id @default(autoincrement())
  tenantId       Int
  templateId     String
  generationTime Int
  fileSize       Int
  pageCount      Int
  features       String[]
  generatedAt    DateTime @default(now())
  generatedBy    String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([templateId])
  @@index([generatedAt])
}

model PDFTemplateConfig {
  id            Int      @id @default(autoincrement())
  tenantId      Int
  templateId    String
  customization Json
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, templateId])
  @@index([tenantId])
}

model ANAFCredentials {
  id             Int       @id @default(autoincrement())
  userId         Int
  tenantId       Int
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([userId])
}

model ANAFSubmissionLog {
  id             Int      @id @default(autoincrement())
  invoiceId      Int
  tenantId       Int
  submissionId   String?
  status         String
  message        String?
  error          String?
  xmlContent     String?
  responseXml    String?
  submittedAt    DateTime @default(now())
  updatedAt      DateTime @updatedAt
  retryCount     Int      @default(0)
  submissionType String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([invoiceId])
  @@index([submissionId])
  @@index([status])
  @@index([submittedAt])
}

model Dashboard {
  id              Int              @id @default(autoincrement())
  tenantId        Int
  name            String
  description     String?
  mode            String           @default("view")
  isPublic        Boolean          @default(false)
  isDefault       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       Int
  updatedBy       Int
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  widgets         Widget[]
  widgetDrafts    WidgetDraft[]
  widgetAudits    WidgetAudit[]
  widgetSnapshots WidgetSnapshot[]
  creator         User             @relation("DashboardCreator", fields: [createdBy], references: [id])
  updater         User             @relation("DashboardUpdater", fields: [updatedBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([tenantId, isDefault])
  @@index([createdBy])
  @@index([updatedBy])
}

model Widget {
  id            Int              @id @default(autoincrement())
  tenantId      Int
  dashboardId   Int
  kind          WidgetKind
  title         String?
  description   String?
  position      Json
  config        Json             @default("{}")
  isVisible     Boolean          @default(true)
  sortOrder     Int              @default(0)
  version       Int              @default(1)
  schemaVersion Int              @default(1)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     Int
  updatedBy     Int
  tenant        Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  dashboard     Dashboard        @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  creator       User             @relation("WidgetCreator", fields: [createdBy], references: [id])
  updater       User             @relation("WidgetUpdater", fields: [updatedBy], references: [id])
  drafts        WidgetDraft[]
  audits        WidgetAudit[]
  snapshots     WidgetSnapshot[]

  @@index([tenantId])
  @@index([dashboardId])
  @@index([tenantId, dashboardId])
  @@index([kind])
  @@index([tenantId, kind])
  @@index([sortOrder])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([config], type: Gin)
}

model WidgetSnapshot {
  id          Int        @id @default(autoincrement())
  widgetId    Int
  tenantId    Int
  dashboardId Int
  version     Int
  kind        WidgetKind
  title       String?
  description String?
  position    Json
  config      Json
  createdAt   DateTime   @default(now())

  widget    Widget    @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([widgetId, version])
  @@index([tenantId])
  @@index([dashboardId])
}

model WidgetDraft {
  id            Int               @id @default(autoincrement())
  tenantId      Int
  dashboardId   Int
  widgetId      Int?
  kind          WidgetKind
  title         String?
  description   String?
  position      Json?
  config        Json
  version       Int               @default(1)
  schemaVersion Int               @default(1)
  status        WidgetDraftStatus @default(PENDING)
  operations    Json?
  conflictMeta  Json?
  note          String?
  createdBy     Int
  updatedBy     Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  appliedAt     DateTime?
  tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  dashboard     Dashboard         @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  widget        Widget?           @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  creator       User              @relation("WidgetDraftCreator", fields: [createdBy], references: [id])
  updater       User              @relation("WidgetDraftUpdater", fields: [updatedBy], references: [id])
  audits        WidgetAudit[]

  @@index([tenantId])
  @@index([dashboardId])
  @@index([widgetId])
  @@index([status])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([createdAt])
}

model WidgetAudit {
  id          Int                  @id @default(autoincrement())
  tenantId    Int
  dashboardId Int
  widgetId    Int?
  draftId     Int?
  actorId     Int?
  operation   WidgetAuditOperation
  diff        Json
  metadata    Json?
  createdAt   DateTime             @default(now())
  tenant      Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  dashboard   Dashboard            @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  widget      Widget?              @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  draft       WidgetDraft?         @relation(fields: [draftId], references: [id], onDelete: SetNull)
  actor       User?                @relation("WidgetAuditActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([dashboardId])
  @@index([widgetId])
  @@index([draftId])
  @@index([actorId])
  @@index([operation])
  @@index([createdAt])
}

enum WidgetKind {
  CHART
  TABLE
  TASKS
  CLOCK
  WEATHER
  KPI
}

enum WidgetDraftStatus {
  PENDING
  READY
  APPLIED
  DISCARDED
  CONFLICT
}

enum WidgetAuditOperation {
  CREATE
  UPDATE
  DELETE
  APPLY_PENDING
  RESOLVE_CONFLICT
}

model ColumnMigrationLog {
  id                     Int      @id @default(autoincrement())
  columnId               Int
  oldType                String
  newType                String
  totalCells             Int
  successfulConversions  Int
  deletedCells           Int      @default(0)
  nullifiedCells         Int      @default(0)
  lossyConversions       Int      @default(0)
  failedCells            Int      @default(0)
  log                    Json?    // Detailed conversion log
  performedBy            Int
  performedAt            DateTime @default(now())
  
  column                 Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user                   User     @relation(fields: [performedBy], references: [id], onDelete: Restrict)
  
  @@index([columnId])
  @@index([performedBy])
  @@index([performedAt])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}
